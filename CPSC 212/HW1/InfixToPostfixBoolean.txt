// Joshua Hull
// jhull@clemson.edu
// Programming Assignment #1: Boolean Expression Evaluator

Converting boolean expressions from infix to postfix

Symbol   In-Stack Priority  In-Coming Priority
======   =================  ==================

@		-2           		-        // stack bottom marker
=		-1			0
&&		0			0
||		0			0
!		-1			3
(		0			3
<		1			1
<=		1			1
>		1			1
>=		1			1
!=		1			1
==		1			1



Pseudo-code Algorithm:

void InfixToPostfixBoolean (StringTokenizer E) {

   // assume that E is the infix boolean expression and that
   // stack will hold operators and is initially empty
 
   stack.push("@");               // initialize stack with bottom marker

   while (true) {
      String token = E.nextToken();
	if ( token == ";" ) {            // end of expression
        	while (stack.top() != "@")  // flush stack
            		System.out.println(stack.pop() + " ");
         	stack.pop();                // empty stack
         	return;
      	} // token == ";"

      else if (token is an operand)   // the sequence of operands is indentical 
         	System.out.println(token);   // in both infix and postfix

      else if (token == ")") {        // look for matching "("
         while (stack.top() != "(")   
            	System.out.println(stack.pop() + " ");
         stack.pop();
      } // token == ")"

      else {                     // token is an operator

         while(ISP(stack.top()) >= ICP(token))
            	System.out.println(stack.pop() + " ");
         stack.push(token);

      } // token is an operator
   } // while
      
} // InfixToPostfixBoolean

// This pseudocode is the exact same as the code from the arithmetic example in class.
// The only thing that has been modified is the priorities. 


